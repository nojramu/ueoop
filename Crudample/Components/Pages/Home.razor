@page "/"
@rendermode InteractiveServer

@inject Crudample.Data.AppDbContext Db
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.Web

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <h2 class="text-center mb-4">🎓 Student Management System</h2>
            <p class="text-center text-muted mb-4">A simple CRUD application for managing student records</p>
        </div>
    </div>
    
    <h3>Student Management System</h3>
    
    <!-- Add/Edit Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h5>@(editingStudent != null ? "Edit Student" : "Add New Student")</h5>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-4">
                    <input @bind="newName" placeholder="Student Name" class="form-control mb-2" />
                    @if (string.IsNullOrWhiteSpace(newName) && showValidation)
                    {
                        <small class="text-danger">Name is required</small>
                    }
                </div>
                <div class="col-md-3">
                    <input type="number" @bind="newAge" placeholder="Age" class="form-control mb-2" />
                    @if (newAge <= 0 && showValidation)
                    {
                        <small class="text-danger">Age must be greater than 0</small>
                    }
                </div>
                <div class="col-md-5">
                    @if (editingStudent != null)
                    {
                        <button @onclick="UpdateStudent" class="btn btn-success me-2">Update</button>
                        <button @onclick="CancelEdit" class="btn btn-secondary">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="AddStudent" class="btn btn-primary">Add Student</button>
                    }
                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="mt-2">
                            <small class="text-info">@statusMessage</small>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Students List -->
    <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Students List (@students.Count students)</h5>
            @if (students.Count > 0)
            {
                <button @onclick="ClearDatabase" class="btn btn-outline-danger btn-sm">
                    <i class="bi bi-trash3"></i> Clear All Data
                </button>
            }
        </div>
        <div class="card-body">
            @if (students.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Age</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var student in students)
                            {
                                <tr>
                                    <td>@student.Id</td>
                                    <td>@student.Name</td>
                                    <td>@student.Age years old</td>
                                    <td>
                                        <button @onclick="() => EditStudent(student)" class="btn btn-sm btn-warning me-2">
                                            <i class="bi bi-pencil"></i> Edit
                                        </button>
                                        <button @onclick="() => DeleteStudent(student)" class="btn btn-sm btn-danger">
                                            <i class="bi bi-trash"></i> Delete
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="bi bi-info-circle"></i> No students found. Add your first student above!
                </div>
            }
        </div>
    </div>
</div>

<!-- Delete Confirmation Section -->
@if (studentToDelete != null)
{
    <div class="alert alert-warning border border-warning rounded shadow-sm mb-4">
        <div class="d-flex align-items-center">
            <i class="bi bi-exclamation-triangle-fill text-warning me-3 fs-4"></i>
            <div class="flex-grow-1">
                <h5 class="alert-heading mb-2">Confirm Delete</h5>
                <p class="mb-2">Are you sure you want to delete <strong>@studentToDelete.Name</strong>?</p>
                <p class="text-muted small mb-0">This action cannot be undone.</p>
            </div>
            <div class="ms-3">
                <button @onclick="ConfirmDelete" class="btn btn-danger me-2">
                    <i class="bi bi-trash"></i> Yes, Delete
                </button>
                <button @onclick="CancelDelete" class="btn btn-secondary">
                    <i class="bi bi-x"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

<!-- Clear Database Confirmation Section -->
@if (showClearConfirmation)
{
    <div class="alert alert-danger border border-danger rounded shadow-sm mb-4">
        <div class="d-flex align-items-center">
            <i class="bi bi-exclamation-octagon-fill text-danger me-3 fs-4"></i>
            <div class="flex-grow-1">
                <h5 class="alert-heading mb-2">⚠️ DANGER: Clear All Database</h5>
                <p class="mb-2">Are you sure you want to <strong>permanently delete ALL @students.Count students</strong>?</p>
                <p class="text-muted small mb-0"><strong>This action cannot be undone and will remove all data from the database!</strong></p>
            </div>
            <div class="ms-3">
                <button @onclick="ConfirmClearDatabase" class="btn btn-danger me-2">
                    <i class="bi bi-trash3-fill"></i> Yes, Delete All
                </button>
                <button @onclick="CancelClearDatabase" class="btn btn-secondary">
                    <i class="bi bi-x"></i> Cancel
                </button>
            </div>
        </div>
    </div>
}

@code {
    private string newName = "";
    private int newAge;
    private List<Crudample.Data.Student> students = new();
    private Crudample.Data.Student? editingStudent = null;
    private Crudample.Data.Student? studentToDelete = null;
    private bool showValidation = false;
    private bool showClearConfirmation = false;
    private string statusMessage = "";

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            await LoadStudents();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    private async Task LoadStudents()
    {
        try 
        {
            students = await Db.Students.OrderBy(s => s.Name).ToListAsync();
            Console.WriteLine($"Loaded {students.Count} students from database");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
            students = new List<Crudample.Data.Student>();
        }
    }

    // CREATE - Add new student
    private async Task AddStudent()
    {
        try 
        {
            // Reset previous messages
            showValidation = false;
            statusMessage = "";
            
            // Validation
            if (string.IsNullOrWhiteSpace(newName))
            {
                showValidation = true;
                statusMessage = "Please enter a name";
                StateHasChanged();
                return;
            }
            
            if (newAge <= 0)
            {
                showValidation = true;
                statusMessage = "Please enter a valid age";
                StateHasChanged();
                return;
            }

            statusMessage = "Adding student...";
            StateHasChanged();

            // Create and save student
            var student = new Crudample.Data.Student 
            { 
                Name = newName.Trim(), 
                Age = newAge 
            };
            
            Db.Students.Add(student);
            await Db.SaveChangesAsync();
            
            Console.WriteLine($"Student '{student.Name}' added successfully with ID: {student.Id}");
            
            // Reset form and reload data
            ClearForm();
            await LoadStudents();
            
            statusMessage = $"Student '{student.Name}' added successfully!";
            StateHasChanged();
            
            // Clear status message after 3 seconds
            _ = Task.Delay(3000).ContinueWith(_ => {
                statusMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding student: {ex.Message}");
            statusMessage = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    // UPDATE - Edit existing student
    private void EditStudent(Crudample.Data.Student student)
    {
        editingStudent = student;
        newName = student.Name ?? "";
        newAge = student.Age;
    }

    private async Task UpdateStudent()
    {
        if (editingStudent == null || string.IsNullOrWhiteSpace(newName) || newAge <= 0)
        {
            return;
        }

        editingStudent.Name = newName.Trim();
        editingStudent.Age = newAge;
        
        Db.Students.Update(editingStudent);
        await Db.SaveChangesAsync();
        
        CancelEdit();
        await LoadStudents();
    }

    private void CancelEdit()
    {
        editingStudent = null;
        ClearForm();
    }

    // DELETE - Remove student
    private void DeleteStudent(Crudample.Data.Student student)
    {
        studentToDelete = student;
        statusMessage = ""; // Clear any previous messages
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        try
        {
            if (studentToDelete != null)
            {
                var studentName = studentToDelete.Name;
                
                Db.Students.Remove(studentToDelete);
                await Db.SaveChangesAsync();
                
                Console.WriteLine($"Student '{studentName}' deleted successfully");
                
                studentToDelete = null;
                await LoadStudents();
                
                statusMessage = $"Student '{studentName}' deleted successfully!";
                StateHasChanged();
                
                // Clear status message after 3 seconds
                _ = Task.Delay(3000).ContinueWith(_ => {
                    statusMessage = "";
                    InvokeAsync(StateHasChanged);
                });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting student: {ex.Message}");
            statusMessage = $"Error deleting student: {ex.Message}";
            StateHasChanged();
        }
    }

    private void CancelDelete()
    {
        studentToDelete = null;
        StateHasChanged();
    }

    // CLEAR DATABASE - Remove all students
    private void ClearDatabase()
    {
        showClearConfirmation = true;
        studentToDelete = null; // Hide any single delete confirmation
        statusMessage = ""; // Clear any previous messages
        StateHasChanged();
    }

    private async Task ConfirmClearDatabase()
    {
        try
        {
            var studentCount = students.Count;
            
            // Remove all students from the database
            Db.Students.RemoveRange(students);
            await Db.SaveChangesAsync();
            
            Console.WriteLine($"All {studentCount} students cleared from database");
            
            showClearConfirmation = false;
            await LoadStudents();
            
            statusMessage = $"Successfully cleared all {studentCount} students from the database!";
            StateHasChanged();
            
            // Clear status message after 5 seconds (longer for this important action)
            _ = Task.Delay(5000).ContinueWith(_ => {
                statusMessage = "";
                InvokeAsync(StateHasChanged);
            });
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error clearing database: {ex.Message}");
            statusMessage = $"Error clearing database: {ex.Message}";
            showClearConfirmation = false;
            StateHasChanged();
        }
    }

    private void CancelClearDatabase()
    {
        showClearConfirmation = false;
        StateHasChanged();
    }

    // Helper method
    private void ClearForm()
    {
        newName = "";
        newAge = 0;
    }
}